JAVA DATA TYPES
- .strip() or .trim() on a string both function the same (strip is unicode aware - never,better)
- look up methods of StringBuilder (reverse, append(str) - can also be append(str, start, len), insert, replace, capacity(shows current capacity), 
- Type sizes in bytes: byte(1), short(2), char(2), int(4), long(8), float(4), double(8), boolean(1)
- sout(5/4) = 1; sout('a') = a; sout('a'+1) = 98
- int z=x++; - z gets value of starting x, then x is incremented
- var i = new int[]{1,2}; is legal
- 'var' is not allowed in a compound declaration(example: var a, b,c;
- String String = "lala"; is valid - there is no restriction on variables after class names
- All compound assignment operators internally do an explicit cast (s *= b) - is casted to s's type
- % operator can be used with float
- *, / and % have the same level of precedence
- float bb = 1f(the same without the f); System.out.println(bb); = 1.0
- Although confusing, it is legal to have multiple underscores between two digits 1___3 = 13, legal
- String is a final class, cannot be extended

OBJECT ORIENTED
- 

EXCEPTIONS: 
- In Java, all exceptions that inherit Exception but not RuntimeException are considered checked exceptions(checked need to be handled)
- unchecked exceptions include any class that inherits RuntimeException or Error. An Error is fatal, and it is considered a poor practice to catch it.
- FileNotFoundException and NotSerializableException both inherit from IOException (checked exceptions)
-try‐with‐resources statements require resources that implement the AutoCloseable interface

CONCURRENCY:
- volatile keyword is used on variables to prevent each threat to cache
- synchronized allows only one thread at a time (also automaticaly is volatile)
- if you call run() on thread it wont start a new thread - you must call start()
- java.lang.Runnable is a functional interface that takes no arguments and returns no data
ex. Runnable sloth = () -> System.out.println("Hello World");
- Even though Runnable is a functional interface, many classes implement it directly:

public class CalculateAverage implements Runnable {
  public void run() {}
}

- Executing a task with Thread is a two-step process. Define the Thread with the corresponding task to be done, start task with Thread.start() method.
- Defining a task that a Thread instance will execute: (implementing Runnable is the correct-er method - Inherit only if you want to override some behavior - not the case here)
public class PrintData implements Runnable {
  @Override public void run() { // Overrides method in Runnable
    for(int i = 0; i < 3; i++)
      System.out.println("Printing record: "+i);
    }
public static void main(String[] args) {
  (new Thread(new PrintData())).start();


public class ReadInventoryThread extends Thread {
  @Override public void run() { // Overrides method in Thread
    System.out.println("Printing zoo inventory");
  }
public static void main(String[] args) {
  (new ReadInventoryThread()).start();
- Calling run() on a Thread or a Runnable does not actually start a new thread. (just executes code in same thread)

- java.util.concurrent.atomic package Atomic classes - solving the race condition
- AtomicBoolean, AtomicInteger, AtomicLong (new AtomicInteger(0); get(), set(), getAndSet(), getAndIncrement(), decrementAndGet()..)

- SheepManager manager = new SheepManager();
synchronized(manager) {
// Work to be completed by one thread at a time - one thread acquires the lock
} 
-To synchronize access across multiple threads, each thread must have access to
the same Object. For example, synchronizing on different objects would not actually order the results.
- You must synchronize the execution of threads not their creation
- synchronized blocks allow only one thread to enter

- Lock interface - like synchronize just better, can only lock on object that implements the Lock interface
Lock lock = new ReentrantLock();
  try {
    lock.lock();
  // Protected code
  } finally {
    lock.unlock();
  }
  
- It is critical that you release a lock the same number of times it is acquired. For calls with tryLock(), you
need to call unlock() only if the method returned true. 

- Concurrency classes: ConcurrentHashMap, ConcurrentLinkedQueue, ConcurrentSkipListMap, ConcurrentSkipListSet, CopyOnWriteArrayList, CopyOnWriteArraySet, LinkedBlockingQueue
(skipList/skipSet are sorted, concurrent collections; copyOnWrite make a new copy of all elements when added/removed elements; BlockingQueue contains methods which wait
a specific time to complete an operation, has: offer() and poll() - both with timeunit)
- Threading issues: deadlock(blocked forever), starvation(denied access), and livelock(failed deadlock resolution - releasing resources in hope of resolving deadlock)
 
 - List.of(1,2,3,4,5,6).stream().unordered(); - calling unordered() on paralel streams can greatly improve performance
 - boxed() returns a Stream consisting of the elements of this stream, each boxed to an Integer
